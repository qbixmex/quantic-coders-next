[
  {
    "id": "6b2bb956-68e3-4a0a-abc7-add384d8239f",
    "title": "Understanding the Basic Data Types in JavaScript",
    "slug": "javascript-data-types",
    "image": "javascript-datatypes.jpg",
    "description": "Learn about the fundamental data types in JavaScript and how they are used in programming.",
    "content": "<p class=\"paragraph mb-5\">JavaScript is one of the most popular programming languages, has several fundamental data types that every developer should understand.</p><p class=\"paragraph mb-5\">These data types are essential for building robust applications and managing data effectively. Let&apos;s dive into the basic data types in JavaScript.</p><h2 class=\"h2 mb-5\">Primitive Data Types</h2><p class=\"paragraph mb-5\">Primitive data types are the simplest types of data and are immutable, meaning their values cannot be changed.</p><h3 class=\"h3 mb-5\">Number</h3><p class=\"paragraph mb-5\">Represents both integers and floating-point numbers.</p><code>const regex = /ab+c/;\n\nconsole.log(regex);\n\n// output -> /ab+c/</code><h3 class=\"h3 mb-5\">String</h3><p class=\"paragraph mb-5\">Represents a sequence of characters.</p><code>const title = \"James Web discover life in a new new planet\";\nconsole.log(title);\n// output -> James Web discover life in a new new planet</code><h3 class=\"h3 mb-5\">Boolean</h3><p class=\"paragraph mb-5\">Represents a logical entity and can have two values: true or false.</p><code>let isEnabled = true;\nconsole.log(isEnabled);\n// output -> true</code><h3 class=\"h3 mb-5\">Undefined</h3><p class=\"paragraph mb-5\">Is a data type where the value is undefined but the variable is assigned.</p><p class=\"paragraph mb-5\">You can assign explicitly undefined but unnecessary because javascript can assign undefined explicitly.</p><code>// Explicit\nlet title = undefined;\nconsole.log(title);\n// output -> undefined\n\n// Implicit\nlet age;\nconsole.log(age);\n// output -> undefined</code><h3 class=\"h3 mb-5\">Null</h3><p class=\"paragraph mb-5\">Represents the intentional absence of any object value.</p><code>let address = null;\nconsole.log(address);\n// output -> null</code><h3 class=\"h3 mb-5\">Symbol</h3><p class=\"paragraph mb-5\">It is commonly used as key in an object.</p><code>const PRICE = Symbol('price');\nconst object = { [PRICE]: 14.25, };\nconsole.log(object[PRICE]);// output -> 14.25</code><h3 class=\"h3 mb-5\">BigInt</h3><p class=\"paragraph mb-5\">Introduced in ES2020, represents integers with arbitrary precision.</p><code>let bigInt = 1234567890123456789012345678901234567890n;\nconsole.log(bigInt);\n// output -> 1234567890123456789012345678901234567890n</code><h3 class=\"subheading mb-5\">Non-Primitive Data Types</h3><p class=\"paragraph mb-5\"> These types are objects and can store collections of data and more complex entities.</p><h3 class=\"h3 mb-5\">Object</h3><p class=\"paragraph mb-5\">An unordered collection of key-value pairs.</p><code>const person = {\n\tname: \"Stan Lee\",\n\tage: 75\n};\n\nconsole.log(person.name);\nconsole.log(person[\"age\"]);\n\n// ==== output ====\n// Stan Lee\n// 75</code><h3 class=\"h3 mb-5v\">Array</h3><p class=\"paragraph mb-5\">A special type of object that holds an ordered list of values.</p><code>// ==== Numbers Array ====\n\nconst numbers = [ 1, 2, 3 ];\nconsole.log(numbers);\n\n// output -> [ 1, 2, 3 ]\n\n// ==== Strings Array ====\n\nconst colors = [ 'red', 'green', 'blue' ];\nconsole.log(colors);\n\n// output -> [ 'red', 'green', 'blue' ]</code><h3 class=\"h3 mb-5\">Function</h3><p class=\"paragraph mb-5\">A special type of object that can be invoked.</p><code>function greeting(name) {\n\tconsole.log(\"Hello\" + \" \" + name); }\n\tgreeting(\"Daniel\");\n}\n\n// output -> Hello Daniel\n\n// ==== Arrow Function Syntax ====\n\nconst greeting = (name) => {\n\tconsole.log(`Hello ${name}`);\n};\n\n// output -> Hello Daniel</code><h3 class=\"h3 mb-5\">Date</h3><p class=\"paragraph mb-5\">Represents dates and times.</p><code>const date = new Date();\nconsole.log(date);\n\n// ==== output example ====\n// 2024-07-14T14:02:25.324Z</code><h3 class=\"h3 mb-5\">RegExp</h3><p class=\"paragraph mb-5\">Represents regular expressions, used for pattern matching.</p><code>const regex = /ab+c/;\nconsole.log(regex);\n\n// output -> /ab+c/</code><h3 class=\"h3 mb-5\">Special Cases</h3><p class=\"paragraph mb-5\">NaN <span class=\"text-sm italic\">(not a number)</span> is a special numeric value that represents an <span class=\"font-semibold italic\">undefined</span> or <span class=\"font-semibold italic\">un-representable</span> value in arithmetic operations. </p><p class=\"paragraph mb-5\">Infinity and -Infinity: Special numeric values representing positive and negative infinity.</p><code>// ==== NaN ====\nconsole.log(5 * 'abc');\n\n// output -> NaN\n\n// ==== Infinity ====\nconst a = 2 / 0;\nconsole.log(a);\n\n// output -> Infinity\n\nconst b = -2 / 0;\nconsole.log(b);\n\n// output -> -Infinity</code>"
  }
]